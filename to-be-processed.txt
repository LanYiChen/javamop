## Overview

Coming soon ...

### Can you show me an example of how to build and run JavaMOP agent?

1. Clone the current version of the tool to somewhere we'll call ```$JAVAMOP_DIR```
2. ```cd $JAVAMOP_DIR```
3. ```ant```
4. ```export PATH=$PATH:path/to/javamop_dir/$JAVAMOP_DIR```
5. ```cd examples/agent/HasNext```
6. ```javamop -agent -n agent rvm```
7. ```javac HasNext_1.java```
8. ```java -javaagent:agent.jar -cp . HasNext```

(Note that you will need to have the following jars in your $CLASSPATH
environment variable: rvmonitorrt.jar, rvmonitor.jar,
aspectjtools.jar, aspectjrt.jar and aspectjweaver.jar.)

### What if I want to build and run an agent with all the properties that have already been formalized?

1. Clone the current version of the tool to somewhere we'll call ```$JAVAMOP_DIR```
2. ```cd $JAVAMOP_DIR```
3. ```ant```
4. ```export PATH=$PATH:path/to/javamop_dir/$JAVAMOP_DIR```
5. ```javamop -agent -n agent -usedb```

This would create an archive called "agent.jar" inside
```$JAVAMOP_DIR```. Of course, if you have set your $PATH as
described, you shoudl be able to run the last step from anywhere.

(Note that you will need to have the following jars in your $CLASSPATH
environment variable: rvmonitorrt.jar, rvmonitor.jar,
aspectjtools.jar, aspectjrt.jar and aspectjweaver.jar.)

Running is similar to the simple examples above. For larger projects
that already use maven and already have tests, running tests while
monitoring properties with the agent is as simple as making one change
to their pom.xml (similar to ant's build.xml) and running "mvn
test". Explanations to follow ....

### Is there any documentation for ALL the available options?

These can be seen by issuing the following command:

- ```javamop -help```

### What if I want customized agents instead (i.e., I want to control which properties go in my agent)?

Pre-packaging a jar with all our properties sound good. The risk,
though, is that, based on my experience with monitoring open source
projects with such an agent, this will likely discourage/annoy users
by detecting *very many* violations of "trivial" properties that users
do not care about or that they can easily find out by themselves
without the heavy firepower of runtime monitoring. (People told me
this when I showed them some of my early results.) We could go the way
that suggested and ship more specialized jars, at the cost of having
to document and maintain these.

The third option is to give (advanced) users the ability to choose
what properties go in their agent. Right now, while the "-usedb"
option will download all our properties, it will read from a user
configurable .properties file to decide which properties will go in
the agent. The user can choose which java package the properties
should come from and what severity level (error, warning, suggestion)
they are interested in. On tp of this, users can specifically list
properties that they don't want by name, and these will further be
excluded from the properties that go in the agent.

